description: "NagiosLogParser configuration file"
version: "0.1"

# This is YAML. If you don't know about YAML, you need to know that spaces are used for indentation. Whitespace width defines sections
#
configurations:
   # We lean on YAML includes to define a base template
   # All checks referring to this base_config will inherent its parameters
   base_config: &base
      # Path to your log file
      # Use an absolute path or assume it is in the current work directory
      logfile: ./Backoffice_access.log

      # Also, throw an unknown status if the log file change date is older than this time in either minutes (..m), hours (..h) or days (..d)
      stalealert: 60h

      # Next, you could filter based on a date / time field. This requires 3 fields:
      # - the date column of the log line, assuming a tab seperated file such as a access log. Comma seperate a second column if the
      #   the time is in another column, the script will concatenate them with a space
      # - the format of these dates, using Python date format conventions. Seperate date and time with a space if they are in 2 columns
      #     https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior
      # - and finally, which to include in either minutes (60m), hours (60h) or days (60d)
      datecolumn: 0,1
      dateformat: %Y-%m-%d %H:%M:%S
      dateage: 60m


   check_http500:
      <<: *base
      # A description label, unused in checking
      description: List the number of error messages on MijnZZ

      # The order of the different operations before aggregation:
      # - Filter
      #     - then countlines and alert on the number of lines left
      #
      #

      # Filter lines, using a regular expression. If you are not familiar with regex, just enter a word
      filter: MijnZZ

      message: Currently we have [RESULT] MijnZZ HTTP 500 error messages per hour

      warning:
        gt: 30

        # Optional message, the base message will be used if none are her
         message: More than [RESULT] MijnZZ HTTP 500 messages in the last 60 minutes

      critical:
         gt: 50
        # Optional message, the base message will be used if none are her
         message: More than [RESULT] MijnZZ HTTP 500 messages in the last 60 minutes

      # Add performancedata to the check result
      performancedata: true

   check_responsetimes:
      <<: *base
      # A description label, unused in checking
      description: Show the average response time on MijnZZ messages

      # The order of the different operations before aggregation:
      # - Filter
      #     - then countlines and alert on the number of lines left
      #
      #

      # Filter lines, using a regular expression. Only matched lines are kept. If you are not familiar with regex, just enter a word
      filter: MijnZZ

      message: Currently we have [RESULT] MijnZZ HTTP 500 error messages per hour

      warning:
        gt: 30

        # Optional message, the base message will be used if none are her
         message: More than [RESULT] MijnZZ HTTP 500 messages in the last 60 minutes

      critical:
         gt: 50
        # Optional message, the base message will be used if none are her
         message: More than [RESULT] MijnZZ HTTP 500 messages in the last 60 minutes

      # Add performancedata to the check result
      performancedata: true
